{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Code-world\\\\React\\\\http-Api-practice\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // method 1\n  // function getMoviesHandler() {\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transaformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transaformedMovies);\n  //     });\n  // }\n\n  // method 2\n  //  async function getMovieHandler() {\n  //   const response = await fetch('https://imdb236.p.rapidapi.com/api/imdb/top250-movies',{\n  //     method: 'GET',\n  //     headers: {\n  //       'x-rapidapi-key': '4f359c7e6dmsh801471f5ca99ebbp1ab93ajsn5ee7f185a49c',\n  //       'x-rapidapi-host': 'imdb236.p.rapidapi.com'\n  //     }\n  //   });\n  //   const data = await response.json();\n  //     console.log(data[0].originalTitle);\n  //     console.log(data[0]);\n  //   const transformedMovie = data.map(movieData => {\n  //     return {\n  //       id: movieData.id,\n  //       title: movieData.originalTitle,\n  //       openingText: movieData.filmingLocations,\n  //       releaseDate: movieData.releaseDate,\n  //     }\n  //   });\n  //   setMovies(transformedMovie);\n  //  };\n\n  const GOTMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://react-http-5e364-default-rtdb.firebaseio.com/movies.json'\n      //   {\n      //   method: 'GET',\n      //   headers: {\n      //     'x-rapidapi-key': '0da7802b0fmshb9d92efa9e9f93cp12c6efjsne0b0e3f6e5c4',\n      //     'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n      //     }\n      // }\n      );\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n      const data = await response.json();\n      console.log(data);\n      const loadedMovie = [];\n      // for(const key in data) {\n      //   loadedMovie = {\n      //     id: key,\n      //     title: data[key].title,\n      //     openingText: data[key].openingText,\n      //     releaseDate: data[key].releaseDate\n      //   }\n      // }\n\n      const tranformedMovie = data.d.map(movieData => {\n        return {\n          id: movieData.id,\n          title: movieData.l,\n          openingText: movieData.s,\n          releaseDate: movieData.y\n        };\n      });\n      setMovies(tranformedMovie);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    GOTMoviesHandler();\n  }, [GOTMoviesHandler]);\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-5e364-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(movie);\n  }\n  let content = 'No movie found';\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 14\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 14\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: GOTMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sSsKuUeLpMnEqSVb7DQnkGcYsfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","MoviesList","AddMovie","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","GOTMoviesHandler","response","fetch","ok","Error","data","json","console","log","loadedMovie","tranformedMovie","d","map","movieData","id","title","l","openingText","s","releaseDate","y","message","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length","fileName","_jsxFileName","lineNumber","columnNumber","children","Fragment","onAddMovie","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Code-world/React/http-Api-practice/src/App.js"],"sourcesContent":["\nimport React, { useCallback, useEffect, useState} from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n     \n          // method 1\n  // function getMoviesHandler() {\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transaformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transaformedMovies);\n  //     });\n  // }\n\n          // method 2\n//  async function getMovieHandler() {\n//   const response = await fetch('https://imdb236.p.rapidapi.com/api/imdb/top250-movies',{\n//     method: 'GET',\n//     headers: {\n//       'x-rapidapi-key': '4f359c7e6dmsh801471f5ca99ebbp1ab93ajsn5ee7f185a49c',\n//       'x-rapidapi-host': 'imdb236.p.rapidapi.com'\n//     }\n//   });\n//   const data = await response.json();\n//     console.log(data[0].originalTitle);\n//     console.log(data[0]);\n//   const transformedMovie = data.map(movieData => {\n//     return {\n//       id: movieData.id,\n//       title: movieData.originalTitle,\n//       openingText: movieData.filmingLocations,\n//       releaseDate: movieData.releaseDate,\n//     }\n//   });\n//   setMovies(transformedMovie);\n//  };\n\n\nconst GOTMoviesHandler = useCallback(async () => {\n  setIsLoading(true);\n  setError(null);\n\n  try {\n      const response = await fetch ('https://react-http-5e364-default-rtdb.firebaseio.com/movies.json', \n      //   {\n      //   method: 'GET',\n      //   headers: {\n      //     'x-rapidapi-key': '0da7802b0fmshb9d92efa9e9f93cp12c6efjsne0b0e3f6e5c4',\n      //     'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n      //     }\n      // }\n    );\n      \n      if(!response.ok){\n        throw new Error('something went wrong!')\n      }\n      \n      const data = await response.json();\n      console.log(data);\n\n      const loadedMovie = [];\n      // for(const key in data) {\n      //   loadedMovie = {\n      //     id: key,\n      //     title: data[key].title,\n      //     openingText: data[key].openingText,\n      //     releaseDate: data[key].releaseDate\n      //   }\n      // }\n\n      const tranformedMovie = data.d.map(movieData => {\n        return{\n          id: movieData.id,\n          title: movieData.l,\n          openingText: movieData.s,\n          releaseDate: movieData.y\n        }\n      });\n      setMovies(tranformedMovie);\n\n  } catch (error) {\n    setError(error.message);\n  }\n  setIsLoading(false); \n}, []);\n\nuseEffect(()=>{\n  GOTMoviesHandler()\n}, [GOTMoviesHandler]);\n\nasync function addMovieHandler(movie) {\n  const response = await fetch ('https://react-http-5e364-default-rtdb.firebaseio.com/movies.json',{\n    method: 'POST',\n    body: JSON.stringify(movie),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  });\n\n  const data = await response.json();\n    console.log(movie);\n}\n\n let content = 'No movie found';\n\n if(movies.length > 0) {\n   content = <MoviesList movies={movies} />;\n }\n\n if (error) {\n   content = <p>{error}</p>;\n }\n\n if(isLoading){\n   content = <p>Loading...</p>\n }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={GOTMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>No movies found</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>} */}\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}